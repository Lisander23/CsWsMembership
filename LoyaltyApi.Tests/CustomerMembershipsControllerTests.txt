using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Xunit;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using LoyaltyApi.Controllers;
using LoyaltyApi.Data;
using LoyaltyApi.Entities;
using LoyaltyApi.Models;

namespace LoyaltyApi.Tests
{
    public class CustomerMembershipsControllerTests
    {
        private DbContextOptions<LoyaltyContext> GetInMemoryOptions()
        {
            return new DbContextOptionsBuilder<LoyaltyContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;
        }

        private void SetupContext(LoyaltyContext context, Action<LoyaltyContext> setupAction)
        {
            setupAction(context);
            context.SaveChanges();
        }

        [Fact]
        public async Task GetMemberships_ReturnsOkResult_WithListOfActiveMemberships()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 100,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddYears(1),
                        Estado = "ACTIVO",
                        IdSuscripcionMP = "sub1",
                        IdClienteMP = "client1",
                        MesesAcumulacionPersonalizado = 12
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 2,
                        CodCliente = 101,
                        PlanId = 2,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddYears(1),
                        Estado = "ACTIVO",
                        IdSuscripcionMP = "sub2",
                        IdClienteMP = "client2",
                        MesesAcumulacionPersonalizado = null
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 3,
                        CodCliente = 102,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(6),
                        Estado = "INACTIVO",
                        IdSuscripcionMP = "sub3",
                        IdClienteMP = "client3",
                        MesesAcumulacionPersonalizado = 6
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);

                var result = await controller.GetMemberships();

                var okResult = Assert.IsType<OkObjectResult>(result);
                Assert.Equal(200, okResult.StatusCode);

                var response = okResult.Value;
                var countProperty = response.GetType().GetProperty("count");
                var dataProperty = response.GetType().GetProperty("data");
                var timestampProperty = response.GetType().GetProperty("timestamp");
                Assert.NotNull(countProperty);
                Assert.NotNull(dataProperty);
                Assert.NotNull(timestampProperty);

                Assert.Equal(2, countProperty.GetValue(response));
                var memberships = Assert.IsAssignableFrom<IEnumerable<CustomerMembershipDto>>(dataProperty.GetValue(response));
                var membershipList = memberships.ToList();
                Assert.Equal(2, membershipList.Count);

                Assert.Contains(membershipList, m => m.Id == 1);
                Assert.Contains(membershipList, m => m.Id == 2);
                Assert.DoesNotContain(membershipList, m => m.Id == 3);

                var firstMembership = membershipList.FirstOrDefault(m => m.Id == 1);
                Assert.NotNull(firstMembership);
                Assert.Equal(100, firstMembership.CodCliente);
                Assert.Equal(1, firstMembership.PlanId);
                Assert.Equal("ACTIVO", firstMembership.Estado);
                Assert.Equal("sub1", firstMembership.IdSuscripcionMP);
                Assert.Equal("client1", firstMembership.IdClienteMP);
                Assert.Equal(12, firstMembership.MesesAcumulacionPersonalizado);
            }
        }

        [Fact]
        public async Task GetMemberships_ReturnsOkResult_WhenNoActiveMembershipsExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);

                var result = await controller.GetMemberships();

                var okResult = Assert.IsType<OkObjectResult>(result);
                Assert.Equal(200, okResult.StatusCode);

                var response = okResult.Value;
                var countProperty = response.GetType().GetProperty("count");
                var dataProperty = response.GetType().GetProperty("data");
                var timestampProperty = response.GetType().GetProperty("timestamp");
                Assert.NotNull(countProperty);
                Assert.NotNull(dataProperty);
                Assert.NotNull(timestampProperty);

                Assert.Equal(0, countProperty.GetValue(response));
                var memberships = Assert.IsAssignableFrom<IEnumerable<CustomerMembershipDto>>(dataProperty.GetValue(response));
                Assert.Empty(memberships);
            }
        }

        [Fact]
        public async Task GetMembershipById_ReturnsOkResult_WithActiveMembership()
        {
            var options = GetInMemoryOptions();
            var fechaInicio = DateTime.UtcNow;
            var fechaFin = DateTime.UtcNow.AddYears(1);
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 100,
                        PlanId = 1,
                        FechaInicio = fechaInicio,
                        FechaFin = fechaFin,
                        Estado = "ACTIVO",
                        IdSuscripcionMP = "sub1",
                        IdClienteMP = "client1",
                        MesesAcumulacionPersonalizado = 12
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 2,
                        CodCliente = 101,
                        PlanId = 2,
                        FechaInicio = fechaInicio,
                        FechaFin = fechaFin,
                        Estado = "INACTIVO",
                        IdSuscripcionMP = "sub2",
                        IdClienteMP = "client2",
                        MesesAcumulacionPersonalizado = 6
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var expectedId = 1;

                var result = await controller.GetMembership(expectedId);

                var okResult = Assert.IsType<OkObjectResult>(result);
                Assert.Equal(200, okResult.StatusCode);

                var response = okResult.Value;
                var dataProperty = response.GetType().GetProperty("data");
                var timestampProperty = response.GetType().GetProperty("timestamp");
                Assert.NotNull(dataProperty);
                Assert.NotNull(timestampProperty);

                var membership = Assert.IsType<CustomerMembershipDto>(dataProperty.GetValue(response));
                Assert.Equal(expectedId, membership.Id);
                Assert.Equal(100, membership.CodCliente);
                Assert.Equal(1, membership.PlanId);
                Assert.Equal("ACTIVO", membership.Estado);
                Assert.Equal("sub1", membership.IdSuscripcionMP);
                Assert.Equal("client1", membership.IdClienteMP);
                Assert.Equal(12, membership.MesesAcumulacionPersonalizado);
                Assert.True(Math.Abs((fechaInicio - membership.FechaInicio).TotalSeconds) < 1);
                Assert.True(Math.Abs((fechaFin - membership.FechaFin).TotalSeconds) < 1);
            }
        }

        [Fact]
        public async Task GetMembershipById_ReturnsNotFound_WhenMembershipDoesNotExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var nonExistentId = 99;

                var result = await controller.GetMembership(nonExistentId);

                var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(404, notFoundResult.StatusCode);

                var response = notFoundResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Membresía no encontrada o inactiva.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task GetMembershipById_ReturnsNotFound_WhenMembershipIsInactive()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 3,
                        CodCliente = 102,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(6),
                        Estado = "INACTIVO",
                        IdSuscripcionMP = "sub3",
                        IdClienteMP = "client3",
                        MesesAcumulacionPersonalizado = 6
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var inactiveId = 3;

                var result = await controller.GetMembership(inactiveId);

                var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(404, notFoundResult.StatusCode);

                var response = notFoundResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Membresía no encontrada o inactiva.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task GetMembershipStatus_ReturnsOkResult_WithActiveMembershipStatusAndAvailableEntries()
        {
            var options = GetInMemoryOptions();
            var codCliente = 100m;
            var planId = 1;
            var entradasMensuales = 5;
            var entradasUsadas = 2;
            var periodoActual = int.Parse(DateTime.UtcNow.ToString("yyyyMM"));
            var fechaInicio = DateTime.UtcNow.AddMonths(-1);
            var fechaFin = DateTime.UtcNow.AddYears(1);

            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    var plan = new MembershipPlan
                    {
                        Id = planId,
                        Nombre = "Plan Premium",
                        PrecioMensual = 50.0m,
                        EntradasMensuales = entradasMensuales,
                        Nivel = 1,
                        Activo = true,
                        Benefits = new List<MembershipBenefit>
                        {
                            new MembershipBenefit { Clave = "VIP", Observacion = "Acceso VIP" },
                            new MembershipBenefit { Clave = "DESCUENTO", Observacion = "Descuentos exclusivos" }
                        }
                    };
                    var membership = new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = codCliente,
                        PlanId = planId,
                        Plan = plan,
                        FechaInicio = fechaInicio,
                        FechaFin = fechaFin,
                        Estado = "ACTIVO"
                    };
                    var entryBalance = new EntryBalance
                    {
                        Id = 1,
                        CustomerMembershipId = membership.Id,
                        Periodo = periodoActual,
                        EntradasUsadas = entradasUsadas
                    };

                    ctx.MembershipPlans.Add(plan);
                    ctx.CustomerMemberships.Add(membership);
                    ctx.EntryBalances.Add(entryBalance);
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var codClienteStr = codCliente.ToString();

                var result = await controller.GetMembershipStatus(codClienteStr);

                var okResult = Assert.IsType<OkObjectResult>(result);
                Assert.Equal(200, okResult.StatusCode);

                var response = okResult.Value;
                var dataProperty = response.GetType().GetProperty("data");
                var timestampProperty = response.GetType().GetProperty("timestamp");
                Assert.NotNull(dataProperty);
                Assert.NotNull(timestampProperty);

                var returnedData = Assert.IsType<MembershipStatusDto>(dataProperty.GetValue(response));
                Assert.Equal("ACTIVO", returnedData.Estado);
                Assert.Equal(planId, returnedData.PlanId);
                Assert.Equal("Plan Premium", returnedData.NombrePlan);
                Assert.Equal(50.0m, returnedData.PrecioMensual);
                Assert.Equal(entradasMensuales, returnedData.EntradasMensuales);
                Assert.Equal(entradasMensuales - entradasUsadas, returnedData.EntradasDisponibles);
                Assert.Equal(1, returnedData.Nivel);
                Assert.Contains("Acceso VIP", returnedData.Beneficios);
                Assert.Contains("Descuentos exclusivos", returnedData.Beneficios);
            }
        }

        [Fact]
        public async Task GetMembershipStatus_ReturnsBadRequest_WhenCodClienteIsInvalid()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var invalidCodCliente = "ABC";

                var result = await controller.GetMembershipStatus(invalidCodCliente);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("CodCliente inválido.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task GetMembershipStatus_ReturnsNotFound_WhenNoActiveMembershipFound()
        {
            var options = GetInMemoryOptions();
            var codCliente = 200m;
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = codCliente });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = codCliente,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow.AddMonths(-1),
                        FechaFin = DateTime.UtcNow.AddYears(1),
                        Estado = "INACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var codClienteStr = codCliente.ToString();

                var result = await controller.GetMembershipStatus(codClienteStr);

                var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(404, notFoundResult.StatusCode);

                var response = notFoundResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Cliente sin membresía activa.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task GetMembershipStatus_ReturnsNotFound_WhenMembershipExpired()
        {
            var options = GetInMemoryOptions();
            var codCliente = 300m;
            var planId = 1;
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = planId,
                        Nombre = "Plan Premium",
                        PrecioMensual = 50.0m,
                        EntradasMensuales = 5,
                        Nivel = 1,
                        Activo = true
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = codCliente,
                        PlanId = planId,
                        FechaInicio = DateTime.UtcNow.AddYears(-2),
                        FechaFin = DateTime.UtcNow.AddYears(-1),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var codClienteStr = codCliente.ToString();

                var result = await controller.GetMembershipStatus(codClienteStr);

                var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(404, notFoundResult.StatusCode);

                var response = notFoundResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("La membresía ha expirado.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task GetMembershipStatus_ReturnsCorrectEntries_WhenNoEntryBalancesForPeriod()
        {
            var options = GetInMemoryOptions();
            var codCliente = 300m;
            var planId = 3;
            var entradasMensuales = 10;
            var periodoActual = int.Parse(DateTime.UtcNow.ToString("yyyyMM"));
            var fechaInicio = DateTime.UtcNow.AddMonths(-1);
            var fechaFin = DateTime.UtcNow.AddYears(1);

            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    var plan = new MembershipPlan
                    {
                        Id = planId,
                        Nombre = "Plan Base",
                        PrecioMensual = 30.0m,
                        EntradasMensuales = entradasMensuales,
                        Nivel = 2,
                        Activo = true
                    };
                    var membership = new CustomerMembership
                    {
                        Id = 2,
                        CodCliente = codCliente,
                        PlanId = planId,
                        Plan = plan,
                        FechaInicio = fechaInicio,
                        FechaFin = fechaFin,
                        Estado = "ACTIVO"
                    };
                    ctx.EntryBalances.Add(new EntryBalance
                    {
                        Id = 2,
                        CustomerMembershipId = membership.Id,
                        Periodo = periodoActual - 1,
                        EntradasUsadas = 5
                    });
                    ctx.MembershipPlans.Add(plan);
                    ctx.CustomerMemberships.Add(membership);
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var codClienteStr = codCliente.ToString();

                var result = await controller.GetMembershipStatus(codClienteStr);

                var okResult = Assert.IsType<OkObjectResult>(result);
                Assert.Equal(200, okResult.StatusCode);

                var response = okResult.Value;
                var dataProperty = response.GetType().GetProperty("data");
                var timestampProperty = response.GetType().GetProperty("timestamp");
                Assert.NotNull(dataProperty);
                Assert.NotNull(timestampProperty);

                var returnedData = Assert.IsType<MembershipStatusDto>(dataProperty.GetValue(response));
                Assert.Equal("ACTIVO", returnedData.Estado);
                Assert.Equal(entradasMensuales, returnedData.EntradasMensuales);
                Assert.Equal(entradasMensuales, returnedData.EntradasDisponibles);
                Assert.Equal(0, returnedData.EntradasMensuales - returnedData.EntradasDisponibles);
            }
        }

        [Fact]
        public async Task GetCustomerMembershipStatus_CallsGetMembershipStatus_AndReturnsResult()
        {
            var options = GetInMemoryOptions();
            var codClienteDecimal = 123m;
            var codClienteStr = codClienteDecimal.ToString();
            var planId = 10;
            var entradasMensuales = 5;
            var entradasUsadas = 2;
            var periodoActual = int.Parse(DateTime.UtcNow.ToString("yyyyMM"));
            var fechaInicio = DateTime.UtcNow.AddMonths(-1);
            var fechaFin = DateTime.UtcNow.AddYears(1);

            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    var plan = new MembershipPlan
                    {
                        Id = planId,
                        Nombre = "Plan Oro",
                        PrecioMensual = 29.99m,
                        EntradasMensuales = entradasMensuales,
                        Nivel = 2,
                        Activo = true,
                        Benefits = new List<MembershipBenefit>
                        {
                            new MembershipBenefit { Clave = "PISCINA", Observacion = "Acceso a piscina" },
                            new MembershipBenefit { Clave = "YOGA", Observacion = "Clases de yoga" }
                        }
                    };
                    var customerMembership = new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = codClienteDecimal,
                        Estado = "ACTIVO",
                        PlanId = planId,
                        Plan = plan,
                        FechaInicio = fechaInicio,
                        FechaFin = fechaFin
                    };
                    var entryBalance = new EntryBalance
                    {
                        CustomerMembershipId = 1,
                        Periodo = periodoActual,
                        EntradasUsadas = entradasUsadas
                    };

                    ctx.MembershipPlans.Add(plan);
                    ctx.CustomerMemberships.Add(customerMembership);
                    ctx.EntryBalances.Add(entryBalance);
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);

                var result = await controller.GetCustomerMembershipStatus(codClienteStr);

                var okResult = Assert.IsType<OkObjectResult>(result);
                Assert.Equal(200, okResult.StatusCode);

                var response = okResult.Value;
                var dataProperty = response.GetType().GetProperty("data");
                var timestampProperty = response.GetType().GetProperty("timestamp");
                Assert.NotNull(dataProperty);
                Assert.NotNull(timestampProperty);

                var dto = Assert.IsType<MembershipStatusDto>(dataProperty.GetValue(response));
                Assert.Equal("ACTIVO", dto.Estado);
                Assert.Equal(planId, dto.PlanId);
                Assert.Equal("Plan Oro", dto.NombrePlan);
                Assert.Equal(29.99m, dto.PrecioMensual);
                Assert.Equal(entradasMensuales, dto.EntradasMensuales);
                Assert.Equal(entradasMensuales - entradasUsadas, dto.EntradasDisponibles);
                Assert.Equal(2, dto.Nivel);
                Assert.Contains("Acceso a piscina", dto.Beneficios);
                Assert.Contains("Clases de yoga", dto.Beneficios);
            }
        }

        [Fact]
        public async Task CreateMembership_ReturnsCreated_WhenValid()
        {
            var options = GetInMemoryOptions();
            var fechaInicio = DateTime.UtcNow;
            var fechaFin = DateTime.UtcNow.AddMonths(1);
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = fechaInicio,
                    FechaFin = fechaFin,
                    IdSuscripcionMP = "sub1",
                    IdClienteMP = "client1",
                    MesesAcumulacionPersonalizado = 12
                };

                var result = await controller.CreateMembership(dto);

                var createdResult = Assert.IsType<CreatedAtActionResult>(result);
                Assert.Equal(201, createdResult.StatusCode);

                var response = createdResult.Value;
                var dataProperty = response.GetType().GetProperty("data");
                var timestampProperty = response.GetType().GetProperty("timestamp");
                Assert.NotNull(dataProperty);
                Assert.NotNull(timestampProperty);

                var membership = Assert.IsType<CustomerMembershipDto>(dataProperty.GetValue(response));
                Assert.Equal(1, membership.CodCliente);
                Assert.Equal(1, membership.PlanId);
                Assert.Equal("ACTIVO", membership.Estado);
                Assert.Equal("sub1", membership.IdSuscripcionMP);
                Assert.Equal("client1", membership.IdClienteMP);
                Assert.Equal(12, membership.MesesAcumulacionPersonalizado);
                Assert.True(Math.Abs((fechaInicio - membership.FechaInicio!.Value).TotalSeconds) < 1);
                Assert.True(Math.Abs((fechaFin - membership.FechaFin!.Value).TotalSeconds) < 1);

                var dbMembership = await context.CustomerMemberships.FindAsync(membership.Id);
                Assert.NotNull(dbMembership);
                Assert.Equal(1, dbMembership.CodCliente);
                Assert.Equal(1, dbMembership.PlanId);
                Assert.Equal("ACTIVO", dbMembership.Estado);
                Assert.Equal("sub1", dbMembership.IdSuscripcionMP);
                Assert.Equal("client1", dbMembership.IdClienteMP);
                Assert.Equal(12, dbMembership.MesesAcumulacionPersonalizado);
            }
        }

        [Fact]
        public async Task CreateMembership_ReturnsBadRequest_WhenClienteDoesNotExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 99,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.CreateMembership(dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("El cliente especificado no existe.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task CreateMembership_ReturnsBadRequest_WhenPlanDoesNotExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 99,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.CreateMembership(dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("El plan especificado no existe.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task CreateMembership_ReturnsBadRequest_WhenPlanIsInactive()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = false
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.CreateMembership(dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("El plan especificado está inactivo.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task CreateMembership_ReturnsBadRequest_WhenFechaInicioAfterFechaFin()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow.AddMonths(1),
                    FechaFin = DateTime.UtcNow
                };

                var result = await controller.CreateMembership(dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("La fecha de inicio debe ser anterior a la fecha de fin.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task CreateMembership_ReturnsConflict_WhenActiveMembershipExists()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.CreateMembership(dto);

                var conflictResult = Assert.IsType<ConflictObjectResult>(result);
                Assert.Equal(409, conflictResult.StatusCode);

                var response = conflictResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Ya existe una membresía activa para este cliente y plan.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task UpdateMembership_ReturnsNoContent_WhenValid()
        {
            var options = GetInMemoryOptions();
            var fechaInicioOriginal = DateTime.UtcNow;
            var fechaFinOriginal = DateTime.UtcNow.AddMonths(1);
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = fechaInicioOriginal,
                        FechaFin = fechaFinOriginal,
                        Estado = "ACTIVO",
                        IdSuscripcionMP = "sub1",
                        IdClienteMP = "client1",
                        MesesAcumulacionPersonalizado = 12
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var fechaInicioNueva = DateTime.UtcNow.AddDays(1);
                var fechaFinNueva = DateTime.UtcNow.AddMonths(2);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = fechaInicioNueva,
                    FechaFin = fechaFinNueva,
                    IdSuscripcionMP = "sub2",
                    IdClienteMP = "client2",
                    MesesAcumulacionPersonalizado = 6
                };

                var result = await controller.UpdateMembership(1, dto);

                var noContentResult = Assert.IsType<NoContentResult>(result);
                Assert.Equal(204, noContentResult.StatusCode);

                var membership = await context.CustomerMemberships.FindAsync(1);
                Assert.Equal(1, membership.CodCliente);
                Assert.Equal(1, membership.PlanId);
                Assert.Equal("ACTIVO", membership.Estado);
                Assert.Equal("sub2", membership.IdSuscripcionMP);
                Assert.Equal("client2", membership.IdClienteMP);
                Assert.Equal(6, membership.MesesAcumulacionPersonalizado);
                Assert.True(Math.Abs((fechaInicioNueva - membership.FechaInicio).TotalSeconds) < 1);
                Assert.True(Math.Abs((fechaFinNueva - membership.FechaFin).TotalSeconds) < 1);
            }
        }

        [Fact]
        public async Task UpdateMembership_ReturnsNotFound_WhenMembershipDoesNotExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.UpdateMembership(99, dto);

                var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(404, notFoundResult.StatusCode);

                var response = notFoundResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Membresía no encontrada o inactiva.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task UpdateMembership_ReturnsBadRequest_WhenClienteDoesNotExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 99,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.UpdateMembership(1, dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("El cliente especificado no existe.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task UpdateMembership_ReturnsBadRequest_WhenPlanDoesNotExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 99,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.UpdateMembership(1, dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("El plan especificado no existe.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task UpdateMembership_ReturnsBadRequest_WhenPlanIsInactive()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = false
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(1)
                };

                var result = await controller.UpdateMembership(1, dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("El plan especificado está inactivo.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task UpdateMembership_ReturnsBadRequest_WhenFechaInicioAfterFechaFin()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow.AddMonths(1),
                    FechaFin = DateTime.UtcNow
                };

                var result = await controller.UpdateMembership(1, dto);

                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.Equal(400, badRequestResult.StatusCode);

                var response = badRequestResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("La fecha de inicio debe ser anterior a la fecha de fin.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task UpdateMembership_ReturnsConflict_WhenOtherActiveMembershipExists()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.Clientes.Add(new Cliente { CodCliente = 1, NomCliente = "Test" });
                    ctx.MembershipPlans.Add(new MembershipPlan
                    {
                        Id = 1,
                        Nombre = "Plan",
                        PrecioMensual = 10,
                        EntradasMensuales = 2,
                        Nivel = 1,
                        Activo = true
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "ACTIVO"
                    });
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 2,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(2),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);
                var dto = new CreateCustomerMembershipDto
                {
                    CodCliente = 1,
                    PlanId = 1,
                    FechaInicio = DateTime.UtcNow,
                    FechaFin = DateTime.UtcNow.AddMonths(3)
                };

                var result = await controller.UpdateMembership(1, dto);

                var conflictResult = Assert.IsType<ConflictObjectResult>(result);
                Assert.Equal(409, conflictResult.StatusCode);

                var response = conflictResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Ya existe otra membresía activa para este cliente y plan.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task DeleteMembership_ReturnsNoContent_WhenValid()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "ACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);

                var result = await controller.DeleteMembership(1);

                var noContentResult = Assert.IsType<NoContentResult>(result);
                Assert.Equal(204, noContentResult.StatusCode);

                var membership = await context.CustomerMemberships.FindAsync(1);
                Assert.Equal("INACTIVO", membership.Estado);
            }
        }

        [Fact]
        public async Task DeleteMembership_ReturnsNotFound_WhenMembershipDoesNotExist()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);

                var result = await controller.DeleteMembership(99);

                var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(404, notFoundResult.StatusCode);

                var response = notFoundResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Membresía no encontrada o ya inactiva.", errorProperty.GetValue(response));
            }
        }

        [Fact]
        public async Task DeleteMembership_ReturnsNotFound_WhenMembershipIsInactive()
        {
            var options = GetInMemoryOptions();
            using (var context = new LoyaltyContext(options))
            {
                SetupContext(context, ctx =>
                {
                    ctx.CustomerMemberships.Add(new CustomerMembership
                    {
                        Id = 1,
                        CodCliente = 1,
                        PlanId = 1,
                        FechaInicio = DateTime.UtcNow,
                        FechaFin = DateTime.UtcNow.AddMonths(1),
                        Estado = "INACTIVO"
                    });
                });
            }

            using (var context = new LoyaltyContext(options))
            {
                var controller = new CustomerMembershipsController(context);

                var result = await controller.DeleteMembership(1);

                var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(404, notFoundResult.StatusCode);

                var response = notFoundResult.Value;
                var errorProperty = response.GetType().GetProperty("error");
                Assert.NotNull(errorProperty);
                Assert.Equal("Membresía no encontrada o ya inactiva.", errorProperty.GetValue(response));
            }
        }
    }
}